Text indexing
=============

Time spent per group member:
* TODO: TODO
* TODO: TODO
* TODO: TODO

Part 1: Insertion sort and quicksort
------------------------------------

**Question**
Consider the following combinations of algorithms and kinds of input:
(a) insertion sort, random input
(b) insertion sort, sorted input
(c) quicksort, first element pivot, random input
(d) quicksort, first element pivot, sorted input
(e) quicksort, random pivot, sorted input

Time each case with the benchmarking program `sorting.Test` on lists of these sizes: 1000, 10000, 100000.
Hints:
* Sorted means randomness=0 and random means randomness=1.
* If you get a StackOverflowError, increase the stack memory available when running the Java program.
  10 MB should be enough, for this you would pass this VM argument: -Xss10M

Use this to decide which of the two growth rate scenarios fits the runtime better:
(1) close to linear (e.g. Θ(n) or Θ(n log(n)))
(2) close to quadratic (e.g. Θ(n^2))

| Case | T(1000) | T(10,000) | T(100,000) | (1) or (2)? |
|------|---------|-----------|------------|-------------|
| (a)  |19,1ms   |   280ms   |    22,4s   |       2     |
| (b)  | 917us   |  3,22ms   |    10,5ms  |      1      |
| (c)  |  3,52ms |   11,2ms  |    50,7ms  |      1      |
| (d)  | 16,7ms  |    180ms  |    Crash   |       2     |
| (e)  |  4,55ms |   11,8ms  |     54ms   |       1     |

Are there disagreements between this experimental data and your theoretical knowledge?

*I could not pass the -Xss10m to the VM as an argument, it did not help the crash :S

We knew insertion sorts works really well for already sorted inputs, or inputs where a large part of the array is already
sorted. Quicksort with first index pivot and sorted input is pretty crap since it chooses the smallest number of the whole
array as a pivot, it's the absolute worst case for quicksort and ends up at quadratic performance n^2.

TODO

Parts 2 and 4: Building the suffix array
----------------------------------------

**Question**
How long does it take to sort the suffix array using the following algorithms?
Abort an algorithm (and skip the rest of its column) once it runs for longer than 100s.

| Text file               | Characters | insertion sort | quicksort | multi-key quicksort |
|-------------------------|------------| ---------------|-----------|---------------------|
| texts/bnc-miniscule.txt |      5,000 |       100ms    |  12,3ms   |                     |
| texts/bnc-tiny.txt      |    100,000 |      25,3s     |  66,7ms   |                     |
| texts/bnc-mini.txt      |  2,100,000 |                |   1,08s   |                     |
| texts/bnc-small.txt     |  5,700,000 |                |   22,91s  |                     |
| texts/bnc-medium.txt    | 20,000,000 |                |   13,9s   |                     |
| texts/bnc-large.txt     | 57,000,000 |                |   37,3s   |                     |

Pivot strategy used:
* quicksort: ADAPTIVE
* multi-key quicksort: TODO

Does this match your knowledge about the asymptotic complexities of insertion sort and quicksort?

TODO

Based on the above data, do quicksort and multi-key quicksort have the same asymptotic complexity?
Justify briefly.

TODO

By what factor is multi-key quicksort faster when compared to quicksort?

TODO

How long do you predict multi-key quicksort to take for texts/bnc-full.txt?
It contains ca. 570 million characters.

TODO

Part 3: Searching using the suffix array
----------------------------------------

**Question**
How many string comparisons does one search query in bnc-large.txt perform?
Explain briefly why (with reference to functions in the code).

TODO

**Question**
The first number `RunSearchPrompt` prints on each line is the position of each search result.
As you can see, these numbers are not ordered: they seem to be random.
Why do you think the results are not shown in increasing order of position?

That is the line in the text where the searchkey is found.

TODO

**Question**
What could be done to fix this?

TODO

Appendix: general information
=============================

**Questions**
Which spoilers did you use?
All of them

TODO

**Question**
Do you know of any bugs or limitations?

TODO

**Question**
Did you collaborate with any other students on this lab?
If so, write with whom and in what way you collaborated.
Also list any resources (including the web) you have used in creating your design.

TODO

**Question**
Did you encounter any serious problems?

TODO

**Question**
What is your feedback on this assignment?

TODO
